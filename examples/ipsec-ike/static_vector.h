/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright 2023 NXP
 */

#ifndef __STATIC_VECTOR_H__
#define __STATIC_VECTOR_H__

#define BE_STATIC_MY_ADDR RTE_BE32(0x0a583308)
#define BE_STATIC_REMOTE_ADDR RTE_BE32(0x0a5833d2)

#define BE_STATIC_TUNNEL_REMOTE_ADDR RTE_BE32(0x14141408)

#define BE_STATIC_INBOUND_SPI RTE_BE32(0xc2cc7cc8)
#define BE_STATIC_OUTBOUND_SPI RTE_BE32(0xc4174b45)

static const char s_crypted_vector_small[] = {
	0x45, 0x00, 0x00, 0xc8, 0x59, 0x9c, 0x40, 0x00,
	0x40, 0x32, 0x64, 0xde, 0x0a, 0x58, 0x33, 0xd2,
	0x0a, 0x58, 0x33, 0x08, 0xc2, 0xcc, 0x7c, 0xc8,
	0x00, 0x00, 0x00, 0x01, 0x4e, 0x3e, 0x21, 0x7e,
	0x0e, 0x79, 0xa5, 0xe8, 0x19, 0xd8, 0x1a, 0xcd,
	0xe4, 0x46, 0xa3, 0x3d, 0x6c, 0x06, 0x9d, 0x2d,
	0xe0, 0x1e, 0x42, 0xc3, 0x86, 0x83, 0xb3, 0xc6,
	0xc1, 0x18, 0x5f, 0x3b, 0x3e, 0xcb, 0x39, 0xef,
	0x70, 0x73, 0x6d, 0x64, 0x90, 0x6c, 0xe2, 0x2d,
	0x5a, 0x10, 0x28, 0xac, 0xea, 0x39, 0xb0, 0xc2,
	0xe0, 0xf2, 0xf2, 0xbf, 0x97, 0x3c, 0x92, 0x53,
	0x0c, 0x80, 0x35, 0x1a, 0x29, 0xe0, 0x53, 0x22,
	0x44, 0x63, 0x42, 0xb7, 0xc0, 0x41, 0x09, 0xfb,
	0x83, 0x76, 0x9b, 0xcb, 0xdd, 0x2e, 0x2f, 0x49,
	0xbc, 0x03, 0xe2, 0x92, 0x27, 0xa3, 0x20, 0xa9,
	0x15, 0x83, 0x12, 0x8b, 0x94, 0x99, 0xfa, 0xd0,
	0x47, 0x37, 0x9e, 0xc7, 0xc3, 0x8e, 0xc1, 0x70,
	0x6c, 0xda, 0xfd, 0xc4, 0xeb, 0x21, 0xe3, 0x7c,
	0x7c, 0x8a, 0x2f, 0xb5, 0xeb, 0xc2, 0x2e, 0x2a,
	0x75, 0x07, 0x7c, 0x37, 0x74, 0xa5, 0xbd, 0x3d,
	0xaf, 0x10, 0xb5, 0xd4, 0x77, 0xe9, 0x36, 0x81,
	0xa8, 0xfb, 0x29, 0x98, 0x08, 0x0d, 0x11, 0x83,
	0x50, 0x63, 0x66, 0x9a, 0x0f, 0x03, 0x14, 0xdc,
	0x3d, 0x1f, 0x8e, 0x6e, 0x4f, 0xdb, 0x80, 0xed,
	0x31, 0xc1, 0xd3, 0x61, 0xa2, 0xba, 0xaa, 0x5c,
};

#define STC_DATA_SMALL { \
	450000c8599c4000403264de0a5833d20a583308c2cc7cc8000000014 \
	e3e217e0e79a5e819d81acde446a33d6c069d2de01e42c38683b3c6c1 \
	185f3b3ecb39ef70736d64906ce22d5a1028acea39b0c2e0f2f2bf973 \
	c92530c80351a29e05322446342b7c04109fb83769bcbdd2e2f49bc03 \
	e29227a320a91583128b9499fad047379ec7c38ec1706cdafdc4eb21e \
	37c7c8a2fb5ebc22e2a75077c3774a5bd3daf10b5d477e93681a8fb29 \
	98080d11835063669a0f0314dc3d1f8e6e4fdb80ed31c1d361a2baaa5c \
}

static const char s_crypted_vector_middle[] = {
	0x45, 0x00, 0x02, 0x58, 0x65, 0xaa, 0x40, 0x00,
	0x40, 0x32, 0x57, 0x40, 0x0a, 0x58, 0x33, 0xd2,
	0x0a, 0x58, 0x33, 0x08, 0xc2, 0xcc, 0x7c, 0xc8,
	0x00, 0x00, 0x00, 0x04, 0x97, 0xad, 0xc0, 0x7b,
	0xa2, 0x06, 0xd5, 0x49, 0xb9, 0x91, 0x39, 0x86,
	0x84, 0xa2, 0xd0, 0x31, 0x9e, 0xc4, 0x6f, 0x2a,
	0x87, 0x02, 0x56, 0x53, 0x57, 0x85, 0x77, 0x32,
	0x03, 0x02, 0x65, 0x68, 0x3e, 0x45, 0xbc, 0x2b,
	0xe6, 0xd5, 0xa7, 0xa7, 0x2b, 0x9f, 0x06, 0x5c,
	0xd5, 0xba, 0xf7, 0xb3, 0x73, 0x0b, 0xdc, 0x22,
	0xe5, 0x3c, 0x53, 0x20, 0x4f, 0x8c, 0xbe, 0x1d,
	0x73, 0x51, 0x0f, 0x42, 0xbd, 0x59, 0x87, 0x8d,
	0xd9, 0x42, 0x92, 0x5b, 0x80, 0x34, 0xaf, 0xef,
	0x81, 0xc9, 0x05, 0x19, 0xbe, 0xae, 0x6f, 0xba,
	0x6d, 0xf2, 0xfb, 0x53, 0x3b, 0xba, 0x89, 0x7e,
	0xd8, 0x87, 0x68, 0xec, 0x1a, 0x8a, 0x28, 0x1e,
	0x05, 0xaf, 0xe5, 0xa3, 0x73, 0xa7, 0x69, 0x26,
	0xb8, 0x3e, 0xbd, 0x26, 0x2d, 0x28, 0xff, 0x7e,
	0xb7, 0x59, 0x61, 0x43, 0x10, 0xe7, 0xbb, 0x9e,
	0xbe, 0xe3, 0xef, 0x3f, 0xab, 0x6b, 0xe7, 0x88,
	0x9e, 0xc5, 0xcf, 0xa4, 0x14, 0x8b, 0xbc, 0xb0,
	0x95, 0x96, 0xcc, 0x3a, 0xd5, 0x1b, 0xfa, 0xd9,
	0x1e, 0x71, 0x5e, 0x99, 0xba, 0xe1, 0x17, 0xc7,
	0x40, 0x5d, 0xa3, 0xf8, 0xcd, 0x42, 0x03, 0x04,
	0x3b, 0x69, 0x32, 0x17, 0xb8, 0xa8, 0x47, 0x4b,
	0x6d, 0xdf, 0x68, 0x8c, 0x9b, 0x9b, 0xc8, 0x38,
	0x70, 0x1d, 0x10, 0x8d, 0x7f, 0x08, 0xce, 0xbd,
	0xb7, 0x71, 0x13, 0xf0, 0x6b, 0xa3, 0xff, 0xbc,
	0xd4, 0x7e, 0x19, 0xfe, 0x0c, 0xa3, 0xe8, 0xf7,
	0x7c, 0x92, 0xe6, 0x61, 0xfb, 0xc6, 0x43, 0x4c,
	0x63, 0x42, 0x5a, 0xb6, 0x67, 0xea, 0xab, 0x9d,
	0x29, 0xbc, 0x39, 0x7a, 0x85, 0xeb, 0x2c, 0x8b,
	0xfa, 0x54, 0xb5, 0xf2, 0x5a, 0x3a, 0x69, 0xd1,
	0xaa, 0xd1, 0xb8, 0x1d, 0xdf, 0xa6, 0xce, 0x18,
	0x0f, 0x4c, 0xb2, 0xf8, 0xcf, 0x48, 0xe9, 0x21,
	0xe8, 0x9c, 0xb7, 0xfb, 0xc0, 0xe4, 0xfd, 0x86,
	0xfd, 0xe4, 0x04, 0x14, 0xa1, 0x22, 0xfb, 0x04,
	0x5d, 0x79, 0x47, 0x0a, 0xa5, 0x23, 0x62, 0xe0,
	0xd1, 0x8a, 0x85, 0x4a, 0x97, 0xca, 0x91, 0xa4,
	0x8c, 0x3d, 0xd2, 0xe8, 0x71, 0x81, 0x7d, 0x91,
	0x6b, 0x26, 0xa2, 0xbe, 0x5a, 0xf9, 0x35, 0x4e,
	0xb8, 0xd3, 0x3e, 0x59, 0xf4, 0x1c, 0xdf, 0x53,
	0xb0, 0x10, 0xb4, 0x34, 0xe8, 0xe0, 0x27, 0xee,
	0x6e, 0x84, 0x24, 0x51, 0xa2, 0x37, 0x32, 0xbe,
	0xd8, 0xd0, 0xcb, 0xf0, 0x35, 0xa5, 0x60, 0xae,
	0xb9, 0x0b, 0xa7, 0xb5, 0x5f, 0x42, 0x76, 0x26,
	0xf7, 0x6a, 0x4a, 0xaf, 0xca, 0xa0, 0x43, 0xc0,
	0xbc, 0xb3, 0x33, 0x12, 0x4e, 0x95, 0x92, 0x53,
	0x3a, 0x38, 0x76, 0x64, 0x31, 0x46, 0xdc, 0x77,
	0x5f, 0x4e, 0xe0, 0x3e, 0x82, 0xa1, 0x6c, 0x81,
	0xdb, 0xdd, 0x70, 0xda, 0xb1, 0xa5, 0x8e, 0x91,
	0xfe, 0xb8, 0xa2, 0xeb, 0x05, 0x90, 0x01, 0x5d,
	0x7f, 0x6d, 0x55, 0x7d, 0x70, 0x0d, 0xf7, 0x34,
	0xa6, 0xed, 0xcf, 0xaa, 0x1a, 0x79, 0x58, 0x59,
	0x88, 0x25, 0x80, 0xa8, 0x2c, 0xc4, 0x1a, 0x6d,
	0x2a, 0x59, 0xfa, 0xb2, 0xe7, 0x65, 0xd3, 0xb2,
	0xa2, 0xb9, 0x56, 0xba, 0x3a, 0x23, 0x72, 0x19,
	0x3f, 0x57, 0x69, 0x8d, 0xd8, 0x90, 0x9c, 0x3c,
	0x53, 0x57, 0xa9, 0xfc, 0x99, 0x5d, 0x96, 0x18,
	0x52, 0x0c, 0xd6, 0xfc, 0x9a, 0xa7, 0x7b, 0xb6,
	0xe9, 0x8c, 0x1f, 0x0e, 0x56, 0x17, 0xb6, 0x7e,
	0xc2, 0x52, 0x56, 0x52, 0x3e, 0x72, 0xb2, 0x1e,
	0x72, 0x28, 0x65, 0x5a, 0x80, 0x4b, 0x0f, 0x62,
	0xfc, 0xa6, 0x8b, 0x4f, 0x78, 0xcf, 0x6d, 0x81,
	0x9a, 0x53, 0x9e, 0xf0, 0x1b, 0x83, 0xac, 0xbe,
	0x54, 0xba, 0xe8, 0x89, 0xd5, 0x13, 0x8a, 0x63,
	0x2d, 0xbc, 0x90, 0x3b, 0x5e, 0x59, 0xf3, 0xff,
	0x84, 0x94, 0x3a, 0x58, 0x0f, 0xbb, 0x22, 0x91,
	0xce, 0xc0, 0x90, 0xba, 0x6e, 0x0e, 0x07, 0xa5,
	0x23, 0xdd, 0x2d, 0xa0, 0xdf, 0xb4, 0x1e, 0x20,
	0xd8, 0x30, 0x37, 0x9b, 0x68, 0x4f, 0x4a, 0x66,
	0x59, 0xa5, 0xf4, 0x42, 0x96, 0x65, 0x0a, 0xcf,
	0xe2, 0x9b, 0x1d, 0x58, 0x28, 0x82, 0xaf, 0x4b,
	0xce, 0x74, 0x3c, 0x82, 0x6f, 0xfc, 0xdd, 0xdc,
	0xc6, 0xff, 0x4a, 0x4a, 0x5c, 0xde, 0x5a, 0xdf,
};

#define STC_DATA_MIDDLE { \
	4500025865aa4000403257400a5833d20a583308c2cc7cc80000000497 \
	adc07ba206d549b991398684a2d0319ec46f2a87025653578577320302 \
	65683e45bc2be6d5a7a72b9f065cd5baf7b3730bdc22e53c53204f8cbe \
	1d73510f42bd59878dd942925b8034afef81c90519beae6fba6df2fb53 \
	3bba897ed88768ec1a8a281e05afe5a373a76926b83ebd262d28ff7eb7 \
	59614310e7bb9ebee3ef3fab6be7889ec5cfa4148bbcb09596cc3ad51b \
	fad91e715e99bae117c7405da3f8cd4203043b693217b8a8474b6ddf68 \
	8c9b9bc838701d108d7f08cebdb77113f06ba3ffbcd47e19fe0ca3e8f7 \
	7c92e661fbc6434c63425ab667eaab9d29bc397a85eb2c8bfa54b5f25a \
	3a69d1aad1b81ddfa6ce180f4cb2f8cf48e921e89cb7fbc0e4fd86fde4 \
	0414a122fb045d79470aa52362e0d18a854a97ca91a48c3dd2e871817d \
	916b26a2be5af9354eb8d33e59f41cdf53b010b434e8e027ee6e842451 \
	a23732bed8d0cbf035a560aeb90ba7b55f427626f76a4aafcaa043c0bc \
	b333124e9592533a3876643146dc775f4ee03e82a16c81dbdd70dab1a5 \
	8e91feb8a2eb0590015d7f6d557d700df734a6edcfaa1a795859882580 \
	a82cc41a6d2a59fab2e765d3b2a2b956ba3a2372193f57698dd8909c3c \
	5357a9fc995d9618520cd6fc9aa77bb6e98c1f0e5617b67ec25256523e \
	72b21e7228655a804b0f62fca68b4f78cf6d819a539ef01b83acbe54ba \
	e889d5138a632dbc903b5e59f3ff84943a580fbb2291cec090ba6e0e07 \
	a523dd2da0dfb41e20d830379b684f4a6659a5f44296650acfe29b1d58 \
	2882af4bce743c826ffcdddcc6ff4a4a5cde5adf \
}

static const struct xfrm_usersa_info s_sa_info[XFRM_POLICY_OUT + 1] = {
	{
		.id.daddr.a4 = BE_STATIC_MY_ADDR,
		.id.spi = BE_STATIC_INBOUND_SPI,
		.id.proto = IPPROTO_ESP,
		.saddr.a4 = BE_STATIC_REMOTE_ADDR,

		.family = AF_INET,
		.mode = XFRM_MODE_TUNNEL,
		/**Must disable anti-replay for static test.*/
		.replay_window = 0,
		.flags = XFRM_STATE_AF_UNSPEC
	},
	{
		.id.daddr.a4 = BE_STATIC_REMOTE_ADDR,
		.id.spi = BE_STATIC_OUTBOUND_SPI,
		.id.proto = IPPROTO_ESP,
		.saddr.a4 = BE_STATIC_MY_ADDR,

		.family = AF_INET,
		.mode = XFRM_MODE_TUNNEL,
		.replay_window = 0,
		.flags = XFRM_STATE_AF_UNSPEC
	}
};

static const struct xfm_ipsec_sa_params s_sa_param[XFRM_POLICY_OUT + 1] = {
	{
		.ciph_present = 1,
		.ciph_alg.alg_name = "cbc(aes)",
		.ciph_alg.alg_key = {
			0xc7, 0xa9, 0xcd, 0xe2, 0x31, 0xc3, 0x5a, 0x35,
			0x45, 0x81, 0x72, 0xa1, 0x9e, 0xbf, 0xbf, 0xc7
		},
		.ciph_alg.alg_key_len = 16,

		.auth_present = XFRMA_AUTH_TRUNC_PRESENT,
		.auth_alg.alg_trunc.alg_name = "hmac(sha1)",
		.auth_alg.alg_trunc.alg_key_len = 20,
		.auth_alg.alg_trunc.alg_key = {
			0x85, 0xf3, 0x32, 0xd9, 0x40, 0x74, 0x91, 0xa3,
			0x5e, 0x0e, 0x8e, 0x4b, 0x05, 0xf4, 0x4a, 0xe9,
			0x72, 0xca, 0x42, 0x4a
		},
	},
	{
		.ciph_present = 1,
		.ciph_alg.alg_name = "cbc(aes)",
		.ciph_alg.alg_key = {
			0x0c, 0x1f, 0x8e, 0x0b, 0x42, 0x43, 0x52, 0x72,
			0xa2, 0x9c, 0x3f, 0x93, 0x1b, 0x57, 0x5a, 0xb2
		},
		.ciph_alg.alg_key_len = 16,

		.auth_present = XFRMA_AUTH_TRUNC_PRESENT,
		.auth_alg.alg_trunc.alg_name = "hmac(sha1)",
		.auth_alg.alg_trunc.alg_key_len = 20,
		.auth_alg.alg_trunc.alg_key = {
			0x86, 0xcb, 0x83, 0xb1, 0xa0, 0xb8, 0xb2, 0xe9,
			0xd4, 0x1b, 0x6c, 0xbb, 0xdb, 0xd1, 0x4a, 0x44,
			0x8c, 0xf6, 0x82, 0x10
		},
	}
};

static const struct xfrm_userpolicy_info s_pol_info[XFRM_POLICY_OUT + 1] = {
	{
		.sel.daddr.a4 = BE_STATIC_MY_ADDR,
		.sel.saddr.a4 = BE_STATIC_TUNNEL_REMOTE_ADDR,
		.sel.family = AF_INET,
		.sel.proto = 0,

		.dir = XFRM_POLICY_IN,
		.index = 592,
		.action = 0,
		.flags = 0
	},
	{
		.sel.daddr.a4 = BE_STATIC_TUNNEL_REMOTE_ADDR,
		.sel.saddr.a4 = BE_STATIC_MY_ADDR,
		.sel.family = AF_INET,
		.sel.proto = 0,

		.dir = XFRM_POLICY_OUT,
		.index = 609,
		.action = 0,
		.flags = 0
	}
};

static const xfrm_address_t s_spdget_src[XFRM_POLICY_OUT + 1] = {
	{
		.a4 = BE_STATIC_REMOTE_ADDR
	},
	{
		.a4 = BE_STATIC_MY_ADDR
	}
};

static const xfrm_address_t s_spdget_dst[XFRM_POLICY_OUT + 1] = {
	{
		.a4 = BE_STATIC_MY_ADDR
	},
	{
		.a4 = BE_STATIC_REMOTE_ADDR
	}
};

#endif /* __STATIC_VECTOR_H__ */
