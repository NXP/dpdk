# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2018-2021 NXP

===============================================================================
NXP DPDK PCIe Endpoint README

1) DPDK build:
i)  Endpoint build:
export CROSS=aarch64-linux-gnu-
export RTE_SDK=/Your/DPDK/path
export RTE_TARGET=arm64-dpaa-linuxapp-gcc
make install T=arm64-dpaa-linuxapp-gcc CONFIG_RTE_LIBRTE_LSX_PCIEP_BUS=y CONFIG_RTE_LIBRTE_LSXINIC_PMD=y EXTRA_CFLAGS='-DRTE_LIBRTE_DPAA2_USE_PHYS_IOVA=y'
make install T=arm64-dpaa-linuxapp-gcc CONFIG_RTE_LIBRTE_LSX_PCIEP_BUS=y CONFIG_RTE_LIBRTE_LSXINIC_PMD=y EXTRA_CFLAGS='-DRTE_LIBRTE_DPAA2_USE_PHYS_IOVA=y' -C examples/port_fwd
#Target image:
#Endpoint example image: "example/port_fwd/build/port_fwd".

ii) Root Complex build:
#X86_64:
export RTE_SDK=/Your/DPDK/path
export RTE_TARGET=x86_64-native-linuxapp-gcc
make T=x86_64-native-linuxapp-gcc install CONFIG_RTE_EAL_IGB_UIO=y CONFIG_RTE_LIBRTE_LSXINIC_PMD=y CONFIG_RTE_LSXINIC_RC_KMOD=y
make T=x86_64-native-linuxapp-gcc install CONFIG_RTE_EAL_IGB_UIO=y CONFIG_RTE_LIBRTE_LSXINIC_PMD=y CONFIG_RTE_LSXINIC_RC_KMOD=y -C examples/port_fwd
#NXP ARM:
export RTE_KERNELDIR=/Your/linux/kernel/path
export CROSS=aarch64-linux-gnu-
export RTE_SDK=/Your/DPDK/path
export RTE_TARGET=arm64-dpaa-linuxapp-gcc
make T=arm64-dpaa-linuxapp-gcc install CONFIG_RTE_EAL_IGB_UIO=y CONFIG_RTE_LIBRTE_LSXINIC_PMD=y CONFIG_RTE_LSXINIC_RC_KMOD=y
make T=arm64-dpaa-linuxapp-gcc install CONFIG_RTE_EAL_IGB_UIO=y CONFIG_RTE_LIBRTE_LSXINIC_PMD=y CONFIG_RTE_LSXINIC_RC_KMOD=y -C examples/port_fwd
#Target images:
#Root Complex kernel driver: "kernel/linux/lsxinic/lsinic.ko".
#Root Complex DPDK UIO driver: "kernel/linux/igb_uio/igb_uio.ko".
#Root Complex DPDK image: "example/port_fwd/build/port_fwd".

2) Basic Test Setup:

             +---port_fwd---+
             |(Kernel ipfwd)|
             |              |
             |              |
        +----------+    +----------+
        | RC PF0   |    |  RC PF1  |
        +-----|----+    +-----|----+
    ----------|----PCIe-BUS---|----------
        +-----|----+    +-----|----+
        | EP PF0   |    | EP PF1   |
        +----------+    +----------+
              |               |
              |               |
              | +-----------+ |
               -| port_fwd  |-
              | +-----------+ |
              |               |
        +-----|----+    +-----|---+
        | DPNIx    |    | DPNIy   |
        +----------+    +---------+

i) Start Endpoint:
export ENABLE_PL_BIT=1
export DPRC=dprc.2
export DPDMAI_COUNT=32
source ./dynamic_dpl.sh dpmac.5 dpmac.6
#forward traffic from dpmac5 to PF0
export PORT0_FWD=1
#forward traffic from PF0 to dpmac5
export PORT1_FWD=0
#forward traffic from dpmac6 to PF1
export PORT0_FWD=2
#forward traffic from PF1 to dpmac6
export PORT1_FWD=3
#single core example:
export P0_DIST_1='(0,0,2)'
export P1_DIST_1='(1,0,2)'
export P2_DIST_1='(2,0,2)'
export P3_DIST_1='(3,0,2)'
#Optional settings:
#qDMA SG format used for burst transaction
export LSINIC_QDMA_SG_ENABLE=1
#qDMA of TXQ is used to update BD/status from EP to RC.
export LSINIC_TXQ_QDMA_NO_RESPONSE=1
#RC appends one byte after payload to notify EP qDMA complete.
export LSINIC_RXQ_QDMA_NO_RESPONSE=1
./port_fwd -c 0x4 -n 1 -- -p 0xf --config="$P0_DIST_1,$P1_DIST_1,$P2_DIST_1,$P3_DIST_1"

ii) Start Root Complex:
#For kernel driver:
insmod lsinic.ko

#For DPDK:
insmod igb_uio.ko
echo "0x1957 0x8d80" > /sys/bus/pci/drivers/igb_uio/new_id
#forward traffic from PF0 to PF1
export PORT0_FWD=1
#forward traffic from PF1 to PF0
export PORT1_FWD=0
#single core example:
export P0_DIST_1='(0,0,2)'
export P1_DIST_1='(1,0,2)'
./port_fwd -c 0x4 -n 1 -- -p 0x3 --config="$P0_DIST_1,$P1_DIST_1"

3) Small packets across PCIe performance improvment on Endpoint:
#Following enviroments are set in EP.
#Merge burst small packets to large packet.
export LSINIC_MERGE_PACKETS=1
#Configure DPAA2 port as recycle port to merge small packets for PCIEx_PFy or PCIEx_PFy_VFz.
#This DPAA2 port may be one dpni self or one single lan serdes port.
export LSXINIC_PCIEx_PFy_HW_MERGE=portid
export LSXINIC_PCIEx_PFy_VFz_HW_MERGE=portid
#Configure DPAA2 port as recycle port to split packet merged with small packets from PCIe host.
#This DPAA2 recycle port will redirect traffic to DPAA2 MAC according to rule applied.
export LSXINIC_PCIEx_PFy_HW_SPLIT=portid
export LSXINIC_PCIEx_PFy_VFz_HW_SPLIT=portid
#Direct traffic from PCIE EP PMD port to DPAA2 port in egress direction.
export LSXINIC_PCIEx_PFy_EGRESS=portid
export LSXINIC_PCIEx_PFy_VFz_EGRESS=portid

4) Multiple EP processes used to communicate with fast path(host DPDK) and slow path(host kernel) respectively.
   Each process is a standalone process and has it's own DPAA2 resources/memory partion.

             +---port_fwd---+                  +-kernel-loopback--+
             |              |                  |                  |
             |              |                  |                  |
             |              |                  |                  |
        +----------+    +----------+      +-------+           +----------+
        | RC PF0   |    |RC PF0VF0 |      |RC PF1 |           |RC PF1VF0 |
        +-----|----+    +-----|----+      +----|--+           +---|------+
    ----------|-------------------PCIe-BUS-----------------------------------
        +-----|----+    +-----|----+     +-----|--+           +---|------+
        | EP PF0   |    |EP PF0VF0 |     | EP PF1 |           |EP PF1VF0 |
        +----------+    +----------+     +--------+           +----------+
              |               |                |                  |
              |               |                |                  |
              | +-----------+ |                | +-------------+  |
               -| port_fwd1 |-                  -| port_fwd2   |-
              | +-----------+ |                | +-------------+  |
              |               |                |                  |
        +-----|----+    +-----|---+       +----|---+          +---|----+
        | DPNIa    |    | DPNIb   |       | DPNIc  |          | DPNId  |
        +----------+    +---------+       +--------+          +--------+

#First EP process:
export ENABLE_PL_BIT=1
export DPDMAI_COUNT=10
export DPIO_COUNT=10
export DPRC=dprc.2
export PORT0_FWD=2
export PORT1_FWD=3
export PORT2_FWD=0
export PORT3_FWD=1
export P0_DIST_1='(0,0,2)'
export P1_DIST_1='(1,0,2)'
export P2_DIST_1='(2,0,2)'
export P3_DIST_1='(3,0,2)'
export LSX_PCIE2_PF1=0
export LSX_PCIE2_PF0_VF0=1
source ./dynamic_dpl.sh dpmac.3 dpmac.4
./port_fwd -c 0x4 -n 1 -- -p 0xf --config="$P0_DIST_1,$P1_DIST_1,$P2_DIST_1,$P3_DIST_1"

#Second EP process
export ENABLE_PL_BIT=1
export DPDMAI_COUNT=10
export DPIO_COUNT=10
export DPRC=dprc.3
export PORT0_FWD=2
export PORT1_FWD=3
export PORT2_FWD=0
export PORT3_FWD=1
export P0_DIST_1='(0,0,4)'
export P1_DIST_1='(1,0,4)'
export P2_DIST_1='(2,0,4)'
export P3_DIST_1='(3,0,4)'
export LSX_PCIE2_PF0=0
export LSX_PCIE2_PF1_VF0=1
export LSINIC_PCIE2_PF1_DEVICE_ID=0x8d90
source ./dynamic_dpl.sh dpmac.5 dpmac.6
./port_fwd -c 0x10 -n 1 --file-prefix rte1 -- -p 0xf --config="$P0_DIST_1,$P1_DIST_1,$P2_DIST_1,$P3_DIST_1"

#RC DPDK for PF0 and PF0VF0
echo 1 > /sys/bus/pci/devices/0000\:06\:00.0/remove
echo 1 > /sys/bus/pci/devices/0000\:06\:00.1/remove
echo 1 > /sys/bus/pci/rescan
insmod igb_uio.ko
echo "0x1957 0x8d80" > /sys/bus/pci/drivers/igb_uio/new_id
echo 1 > /sys/bus/pci/devices/0000\:06\:00.0/max_vfs
export PORT0_FWD=1
export PORT1_FWD=0
export P0_DIST_1='(0,0,2)'
export P1_DIST_1='(1,0,2)'
./port_fwd -c 0x4 -n 1 -- -p 0x3 --config="$P0_DIST_1,$P1_DIST_1"

#RC kernel module for PF1 and PF1VF0
insmod lsinic.ko max_vfs=1 lsinic_loopback=1

5) Primary process is used to handle PCIe EP PMD and secondary process
   is used to handle reset devices(DPAA2, BBDEV etc).

             +-------port_fwd-----+
             |                    |
             |                    |
             |                    |
        +----------+            +----------+
        | RC PF0   |            |RC PF1    |
        +-----|----+            +-----|----+
    ----------|--------PCIe-BUS-------|-----------
        +-----|----+            +-----|----+
        | EP PF0   |            |EP PF1    |
        +----------+            +----------+
              |                         |
              |                         |
              | +--------------------+  |
               -| port_fwd_primary   |--
              | +--------------------+  |
           rte_ring                 rte_ring
              | +--------------------+  |
               -| port_fwd_secondary |--
              | +--------------------+  |
              |                         |
        +-----|----+              +-----|---+
        | DPNIa    |              | DPNIb   |
        +----------+              +---------+

#Primary proxy handles PCIe EP PMD ports only:
export DPIO_COUNT=10
export ENABLE_PL_BIT=1
export DPDMAI_COUNT=10
export DPMCP_COUNT=2
export DPRC=dprc.2
export P2_DIST_1='(2,0,2)'
export P3_DIST_1='(3,0,2)'
export PORT_FWD_RING_FWD=1
source ./dynamic_dpl.sh dpmac.5 dpmac.6
./port_fwd -c 0x4 -b fslmc:dpio.22 -b fslmc:dpio.23 -b fslmc:dpio.24 -b fslmc:dpio.25 -b fslmc:dpmcp.38 -n 1 -- -p 0xc --config="$P2_DIST_1,$P3_DIST_1"

#Secondary process handles dpmac ports only:
export DPRC=dprc.2
export P0_DIST_1='(0,0,8)'
export P1_DIST_1='(1,0,8)'
export PORT_FWD_RING_FWD=1
./port_fwd -c 0x100 -b fslmc:dpio.16 -b fslmc:dpio.17 -b fslmc:dpio.18 -b fslmc:dpio.19 -b fslmc:dpio.20 -b fslmc:dpio.21 -b fslmc:dpmcp.37 -n 1 --proc-type=secondary -- -p 0x3 --config="$P0_DIST_1,$P1_DIST_1"

5) Secondary process is used to handle PCIe EP PMD and primary process
   is used to handle reset devices(DPAA2, BBDEV etc).

             +-------port_fwd-----+
             |                    |
             |                    |
             |                    |
        +----------+            +----------+
        | RC PF0   |            |RC PF1    |
        +-----|----+            +-----|----+
    ----------|--------PCIe-BUS-------|-----------
        +-----|----+            +-----|----+
        | EP PF0   |            |EP PF1    |
        +----------+            +----------+
              |                         |
              |                         |
              | +--------------------+  |
               -| port_fwd_secondary |--
              | +--------------------+  |
           rte_ring                 rte_ring
              | +--------------------+  |
               -| port_fwd_primary   |--
              | +--------------------+  |
              |                         |
        +-----|----+              +-----|---+
        | DPNIa    |              | DPNIb   |
        +----------+              +---------+

#Primary process handles dpmac ports only:
export DPIO_COUNT=10
export ENABLE_PL_BIT=1
export DPDMAI_COUNT=10
export DPMCP_COUNT=2
export DPRC=dprc.2
export P0_DIST_1='(0,0,2)'
export P1_DIST_1='(1,0,2)'
export PORT_FWD_RING_FWD=1
source ./dynamic_dpl.sh dpmac.5 dpmac.6
./port_fwd -c 0x4 -b fslmc:dpio.22 -b fslmc:dpio.23 -b fslmc:dpio.24 -b fslmc:dpio.25 -b fslmc:dpmcp.38 -n 1 -- -p 0x3 --config="$P0_DIST_1,$P1_DIST_1"

#Secondary proxy handles PCIe EP PMD ports only:
export DPRC=dprc.2
export P2_DIST_1='(2,0,8)'
export P3_DIST_1='(3,0,8)'
export PORT_FWD_RING_FWD=1
./port_fwd -c 0x100 -b fslmc:dpio.16 -b fslmc:dpio.17 -b fslmc:dpio.18 -b fslmc:dpio.19 -b fslmc:dpio.20 -b fslmc:dpio.21 -b fslmc:dpmcp.37 -n 1 --proc-type=secondary -- -p 0xc --config="$P2_DIST_1,$P3_DIST_1"

5) PCIe EP/RC PMD simulator setup and traffic measurment on single board.
   This is used to develope, debug and tuning PCIe EP framework if PCIe EP env is insufficient.

             +-----port_fwd----+
             | (Secondary RC)  |
             |                 |
             |                 |
        +----------+    +----------+
        | RC PF0   |    |  RC PF1  |
        +-----|----+    +------|---+
    ----------|Shared Huge TLB |--------
        +-----|----+    +------|---+
        | EP PF0   |    | EP PF1   |
        +----------+    +----------+
              |                |
              |                |
              | +------------+ |
               -|  port_fwd  |-
              | |(Primary EP)| |
              | +------------+ |
              |                |
        +-----|----+    +------|--+
        | DPNIx    |    | DPNIy   |
        +----------+    +---------+
#Primary EP process
export DPIO_COUNT=10
export ENABLE_PL_BIT=1
export DPDMAI_COUNT=10
export DPMCP_COUNT=2
export DPRC=dprc.2
export P0_DIST_1='(0,0,2)'
export P1_DIST_1='(1,0,2)'
export LSX_PCIE2_SIM=1
source ./dynamic_dpl.sh dpmac.5 dpmac.6
./port_fwd -c 0x4 -n 1 --proc-type=primary -- -p 0x3 --config="$P0_DIST_1,$P1_DIST_1"

#Secondary RC process
i) Cross build:
make install T=arm64-dpaa-linuxapp-gcc CONFIG_RTE_LIBRTE_LSX_PCIEP_BUS=n CONFIG_RTE_LIBRTE_LSXINIC_PMD=y CONFIG_RTE_LIBRTE_DPAA2_PMD=n CONFIG_RTE_LIBRTE_DPAA2_MEMPOOL=n CONFIG_RTE_LIBRTE_DPAA2_EVENTDEV_PMD=n CONFIG_RTE_LIBRTE_PMD_DPAA2_SEC=n EXTRA_CFLAGS='-DRTE_LIBRTE_DPAA2_USE_PHYS_IOVA=y'
make install T=arm64-dpaa-linuxapp-gcc CONFIG_RTE_LIBRTE_LSX_PCIEP_BUS=n CONFIG_RTE_LIBRTE_LSXINIC_PMD=y CONFIG_RTE_LIBRTE_DPAA2_PMD=n CONFIG_RTE_LIBRTE_DPAA2_MEMPOOL=n CONFIG_RTE_LIBRTE_DPAA2_EVENTDEV_PMD=n CONFIG_RTE_LIBRTE_PMD_DPAA2_SEC=n EXTRA_CFLAGS='-DRTE_LIBRTE_DPAA2_USE_PHYS_IOVA=y' -C examples/port_fwd

ii) Run:
export P0_DIST_1='(0,0,8)'
export P1_DIST_1='(1,0,8)'
export LSINIC_RC_SIM=1
export LSINIC_RC_PROC_SECONDARY_STANDALONE=1
export PORT_FWD_SECONDARY_STANDALONE=1
export PORT0_FWD=1
export PORT1_FWD=0
export SYSFS_PCI_DEVICES=/tmp
./port_fwd -c 0x100 -n 1 --proc-type=secondary -- -p 0x3 --config="$P0_DIST_1,$P1_DIST_1"
