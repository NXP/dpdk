/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright 2023 NXP
 */

/* This file contains the MAC, DMA and MTL registers defines along with the
 * descriptor (Transmit and receive) defines
 */

#define BIT_INDEX	1
#define BITS_PER_LONG   (__SIZEOF_LONG__ * 8)
#define GENMASK_SET(a, b) \
	(((~0UL) << (b)) & (~0UL >> (BITS_PER_LONG - BIT_INDEX - (a))))

/*  MAC registers */
#define EQOS_MAC_CONFIGURATION			0x00000000
#define EQOS_MAC_EXT_CONFIGURATION		0x00000004
#define EQOS_MAC_PKT_FILTER			0x00000008
#define EQOS_MAC_HASH_TAB(x)			(0x10 + (x) * 4)
#define EQOS_MAC_VLAN_TAG			0x00000050
#define EQOS_MAC_VLAN_TAG_DATA			0x00000054
#define EQOS_MAC_VLAN_HASH_TABLE		0x00000058
#define EQOS_MAC_VLAN_INCL			0x00000060
#define EQOS_MAC_QX_TX_FLOW_CTRL(x)		(0x70 + x * 4)
#define EQOS_MAC_RX_FLOW_CTRL			0x00000090
#define EQOS_MAC_TXQ_PRTY_MAP0			0x98
#define EQOS_MAC_TXQ_PRTY_MAP1			0x9C
#define EQOS_MAC_RXQ_CTRL0			0x000000a0
#define EQOS_MAC_RXQ_CTRL1			0x000000a4
#define EQOS_MAC_RXQ_CTRL2			0x000000a8
#define EQOS_MAC_RXQ_CTRL3			0x000000ac
#define EQOS_MAC_INT_STATUS			0x000000b0
#define EQOS_MAC_INT_EN				0x000000b4
#define EQOS_MAC_RX_TX_STATUS			0x000000b8
#define EQOS_MAC_PMT				0x000000c0
#define EQOS_MAC_1US_TIC_COUNTER		0x000000dc

#define EQOS_MAC_VERSION			0x00000110
#define EQOS_MAC_DEBUG				0x00000114
#define EQOS_MAC_HW_FEATURE0			0x0000011c
#define EQOS_MAC_HW_FEATURE1			0x00000120
#define EQOS_MAC_HW_FEATURE2			0x00000124
#define EQOS_MAC_HW_FEATURE3			0x00000128
#define EQOS_MAC_MDIO_ADDR			0x00000200
#define EQOS_MAC_MDIO_DATA			0x00000204
#define EQOS_MAC_ADDR_HIGH(reg_val)		(0x300 + reg_val * 8)
#define EQOS_MAC_ADDR_LOW(reg_val)		(0x304 + reg_val * 8)
#define EQOS_MAC_L3L4_CTRL(reg_val)		(0x900 + (reg_val) * 0x30)
#define EQOS_MAC_L4_ADDR(reg_val)		(0x904 + (reg_val) * 0x30)
#define EQOS_MAC_L3_ADDR0(reg_val)		(0x910 + (reg_val) * 0x30)
#define EQOS_MAC_L3_ADDR1(reg_val)		(0x914 + (reg_val) * 0x30)
#define EQOS_MAC_TS_STATUS			0x00000b20

/* MAC Packet Filtering registers */
#define EQOS_MAC_PKT_FILTER_PR			(BIT_INDEX << (0))
#define EQOS_MAC_PKT_FILTER_HMC			(BIT_INDEX << (2))
#define EQOS_MAC_PKT_FILTER_PM			(BIT_INDEX << (4))
#define EQOS_MAC_PKT_FILTER_PCF			(BIT_INDEX << (7))
#define EQOS_MAC_PKT_FILTER_HPF			(BIT_INDEX << (10))
#define EQOS_MAC_PKT_FILTER_VTFE		(BIT_INDEX << (16))
#define EQOS_MAC_PKT_FILTER_IPFE		(BIT_INDEX << (20))
#define EQOS_MAC_PKT_FILTER_RA			(BIT_INDEX << (31))

/* MAC RX Queue Enable registers */
#define EQOS_MAC_RX_QUEUE_CLEAR(queue)		~(GENMASK_SET(1, 0) << ((queue) * 2))
#define EQOS_MAC_RX_AV_QUEUE_ENABLE(queue)	(BIT_INDEX << ((queue) * 2))
#define EQOS_MAC_RX_DCB_QUEUE_ENABLE(queue)	(BIT_INDEX << (((queue) * 2) + 1))

/* MAC Flow Control RX registers */
#define EQOS_MAC_RX_FLOW_CTRL_RFE		(BIT_INDEX << (0))

/* MAC Flow Control TX registers */
#define EQOS_MAC_TX_FLOW_CTRL_TFE		(BIT_INDEX << (1))
#define EQOS_MAC_TX_FLOW_CTRL_PT_SHIFT		16

/* MAC config registers */
#define EQOS_MAC_CONFIG_ARPEN			(BIT_INDEX << (31))
#define EQOS_MAC_CONFIG_SARC			GENMASK_SET(30, 28)
#define EQOS_MAC_CONFIG_SARC_SHIFT		28
#define EQOS_MAC_CONFIG_IPC			(BIT_INDEX << (27))
#define EQOS_MAC_CONFIG_IPG			GENMASK_SET(26, 24)
#define EQOS_MAC_CONFIG_IPG_SHIFT		24
#define EQOS_MAC_CONFIG_2K			(BIT_INDEX << (22))
#define EQOS_MAC_CONFIG_ACS			(BIT_INDEX << (20))
#define EQOS_MAC_CONFIG_BE			(BIT_INDEX << (18))
#define EQOS_MAC_CONFIG_JD			(BIT_INDEX << (17))
#define EQOS_MAC_CONFIG_JE			(BIT_INDEX << (16))
#define EQOS_MAC_CONFIG_PS			(BIT_INDEX << (15))
#define EQOS_MAC_CONFIG_FES			(BIT_INDEX << (14))
#define EQOS_MAC_CONFIG_FES_SHIFT		14
#define EQOS_MAC_CONFIG_DM			(BIT_INDEX << (13))
#define EQOS_MAC_CONFIG_LM			(BIT_INDEX << (12))
#define EQOS_MAC_CONFIG_DCRS			(BIT_INDEX << (9))
#define EQOS_MAC_CONFIG_TE			(BIT_INDEX << (1))
#define EQOS_MAC_CONFIG_RE			(BIT_INDEX << (0))

/* MAC HW ADDR registers */
#define EQOS_MAC_HI_DCS				GENMASK_SET(18, 16)
#define EQOS_MAC_HI_DCS_SHIFT			16
#define EQOS_MAC_HI_REG_AE			(BIT_INDEX << (31))

/*  MTL registers */
#define EQOS_MTL_OPERATION_MODE		0x00000c00
#define EQOS_MTL_FRPE			(BIT_INDEX << (15))
#define EQOS_MTL_OPERATION_SCHALG_MASK	GENMASK_SET(6, 5)
#define EQOS_MTL_OPERATION_SCHALG_WRR	(0x0 << 5)
#define EQOS_MTL_OPERATION_SCHALG_WFQ	(0x1 << 5)
#define EQOS_MTL_OPERATION_SCHALG_DWRR	(0x2 << 5)
#define EQOS_MTL_OPERATION_SCHALG_SP	(0x3 << 5)
#define EQOS_MTL_OPERATION_RAA		(BIT_INDEX << (2))
#define EQOS_MTL_OPERATION_RAA_SP	(0x0 << 2)
#define EQOS_MTL_OPERATION_RAA_WSP	(0x1 << 2)

#define EQOS_MTL_INT_STATUS		0x00000c20
#define EQOS_MTL_INT_QX(x)		(BIT_INDEX << (x))

#define EQOS_MTL_RXQ_DMA_MAP0			0x00000c30 /* For Queue 0 to 3 */
#define EQOS_MTL_RXQ_DMA_MAP1			0x00000c34 /* For Queue 4 to 7 */
#define EQOS_MTL_RXQ_DMA_Q04MDMACH_MASK		GENMASK_SET(3, 0)
#define EQOS_MTL_RXQ_DMA_Q04MDMACH(x)		((x) << 0)
#define EQOS_MTL_RXQ_DMA_QXMDMACH_MASK(x)	GENMASK_SET(11 + (8 * ((x) - 1)), 8 * (x))
#define EQOS_MTL_RXQ_DMA_QXMDMACH(chan, q)	((chan) << (8 * (q)))

#define EQOS_MTL_TXQ_CHAN_BASE_ADDR		0x00000d00
#define EQOS_MTL_CHAN_BASE_OFFSET		0x40
#define EQOS_MTL_CHANX_BASE_ADDR(x)		(EQOS_MTL_TXQ_CHAN_BASE_ADDR + \
							(x * EQOS_MTL_CHAN_BASE_OFFSET))

#define EQOS_MTL_CHAN_TX_OP_MODE(x)		EQOS_MTL_CHANX_BASE_ADDR(x)
#define EQOS_MTL_CHAN_TX_DEBUG(x)		(EQOS_MTL_CHANX_BASE_ADDR(x) + 0x8)
#define EQOS_MTL_CHAN_INT_CTRL(x)		(EQOS_MTL_CHANX_BASE_ADDR(x) + 0x2c)
#define EQOS_MTL_CHAN_RX_OP_MODE(x)		(EQOS_MTL_CHANX_BASE_ADDR(x) + 0x30)
#define EQOS_MTL_CHAN_RX_DEBUG(x)		(EQOS_MTL_CHANX_BASE_ADDR(x) + 0x38)
#define EQOS_MTL_CHAN_RX_CONTROL(x)		(EQOS_MTL_CHANX_BASE_ADDR(x) + 0x3c)

#define EQOS_MTL_OP_MODE_RSF			(BIT_INDEX << (5))
#define EQOS_MTL_OP_MODE_TXQEN_MASK		GENMASK_SET(3, 2)
#define EQOS_MTL_OP_MODE_TXQEN_AV		(BIT_INDEX << (2))
#define EQOS_MTL_OP_MODE_TXQEN		   	(BIT_INDEX << (3))
#define EQOS_MTL_OP_MODE_TSF			(BIT_INDEX << (1))

#define EQOS_MTL_OP_MODE_TQS_MASK		GENMASK_SET(24, 16)
#define EQOS_MTL_OP_MODE_TQS_SHIFT		16

#define EQOS_MTL_OP_MODE_RQS_MASK		GENMASK_SET(29, 20)
#define EQOS_MTL_OP_MODE_RQS_SHIFT		20

#define EQOS_MTL_OP_MODE_RFD_MASK		GENMASK_SET(19, 14)
#define EQOS_MTL_OP_MODE_RFD_SHIFT		14

#define EQOS_MTL_OP_MODE_RFA_MASK		GENMASK_SET(13, 8)
#define EQOS_MTL_OP_MODE_RFA_SHIFT		8

#define EQOS_MTL_OP_MODE_EHFC			(BIT_INDEX << (7))

/* Default init operating mode of the MAC */
#define EQOS_MAC_CORE_INIT (EQOS_MAC_CONFIG_JD | EQOS_MAC_CONFIG_DM | \
		EQOS_MAC_CONFIG_BE | EQOS_MAC_CONFIG_DCRS | \
		EQOS_MAC_CONFIG_JE)

/* Rx frame status */
enum rx_frame_status {
	ok_frame = 0x0,
	discard_frame = 0x1,
	csum_none = 0x2,
	llc_snap = 0x4,
	dma_owner = 0x8,
	rx_not_ldesc = 0x10,
};

/* Tx frame status */
enum tx_frame_status {
	tx_comp = 0x0,
	tx_not_ldesc = 0x1,
	tx_error = 0x2,
	tx_dma_owner = 0x4,
	tx_error_bump_tc = 0x8,
};

#define ENETQOS_CHAIN_MODE	0x1
#define ENETQOS_RING_MODE	0x2

#define EQOS_DMA_MODE			0x00001000
#define EQOS_DMA_SYS_BUS_MODE		0x00001004
#define EQOS_DMA_INTERRUPT_STATUS	0x00001008
#define EQOS_DMA_DEBUG_STATUS_0		0x0000100c
#define EQOS_DMA_DEBUG_STATUS_1		0x00001010
#define EQOS_DMA_DEBUG_STATUS_2		0x00001014
#define EQOS_DMA_TBS_CTRL		0x00001050

/* DMA Bus Mode */
#define EQOS_DMA_BUS_MODE_DCHE			(BIT_INDEX << (19))
#define EQOS_DMA_BUS_MODE_INTM_MASK		GENMASK_SET(17, 16)
#define EQOS_DMA_BUS_MODE_INTM_SHIFT		16
#define EQOS_DMA_BUS_MODE_INTM_MODE1		0x1
#define EQOS_DMA_BUS_MODE_SFT_RESET		(BIT_INDEX << (0))

/* DMA SYS Bus Mode */
#define EQOS_DMA_BUS_MODE_SPHi			(BIT_INDEX << (24))
#define EQOS_DMA_BUS_MODE_PBL			(BIT_INDEX << (16))
#define EQOS_DMA_BUS_MODE_PBL_SHIFT		16
#define EQOS_DMA_BUS_MODE_RPBL_SHIFT		16
#define EQOS_DMA_BUS_MODE_MB			(BIT_INDEX << (14))
#define EQOS_DMA_BUS_MODE_FB			(BIT_INDEX << (0))

/* DMA Interrupt top status */
#define EQOS_DMA_STATUS_MAC		(BIT_INDEX << (17))
#define EQOS_DMA_STATUS_MTL		(BIT_INDEX << (16))
#define EQOS_DMA_STATUS_CHAN7		(BIT_INDEX << (7))
#define EQOS_DMA_STATUS_CHAN6		(BIT_INDEX << (6))
#define EQOS_DMA_STATUS_CHAN5		(BIT_INDEX << (5))
#define EQOS_DMA_STATUS_CHAN4		(BIT_INDEX << (4))
#define EQOS_DMA_STATUS_CHAN3		(BIT_INDEX << (3))
#define EQOS_DMA_STATUS_CHAN2		(BIT_INDEX << (2))
#define EQOS_DMA_STATUS_CHAN1		(BIT_INDEX << (1))
#define EQOS_DMA_STATUS_CHAN0		(BIT_INDEX << (0))

/* DMA debug status bitmap */
#define EQOS_DMA_DEBUG_STATUS_TS_MASK	0xf
#define EQOS_DMA_DEBUG_STATUS_RS_MASK	0xf

#define EQOS_DMA_SYS_BUS_MB		(BIT_INDEX << (14))
#define EQOS_DMA_SYS_BUS_AAL		(BIT_INDEX << (12))
#define EQOS_DMA_SYS_BUS_EAME		(BIT_INDEX << (11))
#define EQOS_DMA_SYS_BUS_FB		(BIT_INDEX << (0))

/* Following DMA defines are channel oriented */
#define EQOS_DMA_CHAN_CONTROL_BASE_ADDR		0x00001100
#define EQOS_DMA_CHAN_BASE_OFFSET		0x80
#define EQOS_DMA_CHANX_BASE_ADDR(x)		(EQOS_DMA_CHAN_CONTROL_BASE_ADDR + \
							(x * EQOS_DMA_CHAN_BASE_OFFSET))
#define EQOS_DMA_CHAN_REG_NUMBER		17

#define EQOS_DMA_CHAN_CONTROL(x)		EQOS_DMA_CHANX_BASE_ADDR(x)
#define EQOS_DMA_CHAN_TX_CONTROL(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x4)
#define EQOS_DMA_CHAN_RX_CONTROL(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x8)
#define EQOS_DMA_CHAN_TX_BASE_ADDR_HI(x)	(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x10)
#define EQOS_DMA_CHAN_TX_BASE_ADDR(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x14)
#define EQOS_DMA_CHAN_RX_BASE_ADDR_HI(x)	(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x18)
#define EQOS_DMA_CHAN_RX_BASE_ADDR(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x1c)
#define EQOS_DMA_CHAN_TX_END_ADDR(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x20)
#define EQOS_DMA_CHAN_RX_END_ADDR(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x28)
#define EQOS_DMA_CHAN_TX_RING_LEN(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x2c)
#define EQOS_DMA_CHAN_RX_RING_LEN(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x30)
#define EQOS_DMA_CHAN_INTR_ENA(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x34)
#define EQOS_DMA_CHAN_RX_WATCHDOG(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x38)
#define EQOS_DMA_CHAN_SLOT_CTRL_STATUS(x)	(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x3c)
#define EQOS_DMA_CHAN_CUR_TX_DESC(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x44)
#define EQOS_DMA_CHAN_CUR_RX_DESC(x)		(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x4c)
#define EQOS_DMA_CHAN_CUR_TX_BUF_ADDR(x)	(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x54)
#define EQOS_DMA_CHAN_CUR_RX_BUF_ADDR(x)	(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x5c)
#define EQOS_DMA_CHAN_STATUS(x)			(EQOS_DMA_CHANX_BASE_ADDR(x) + 0x60)

/* DMA Tx Channel Control registers */
#define EQOS_DMA_CONTROL_EDSE			(BIT_INDEX << (28))
#define EQOS_DMA_CONTROL_TSE			(BIT_INDEX << (12))
#define EQOS_DMA_CONTROL_OSP			(BIT_INDEX << (4))
#define EQOS_DMA_CONTROL_ST			(BIT_INDEX << (0))

/* DMA Rx Channel Control registers */
#define EQOS_DMA_CONTROL_SR			(BIT_INDEX << (0))
#define EQOS_DMA_RBSZ_MASK			GENMASK_SET(14, 1)
#define EQOS_DMA_RBSZ_SHIFT			1

/* Transmit Normal Descriptor (Read Format) */

/* Trasmit Normal Descriptor 2 (TDES2 Read Format) */
#define EQOS_TDES2_BUF1_SZ_MASK		GENMASK_SET(13, 0)
#define EQOS_TDES2_VLAN_TAG_MASK	GENMASK_SET(15, 14)
#define EQOS_TDES2_VLAN_TAG_SHIFT	14
#define EQOS_TDES2_BUF2_SZ_MASK		GENMASK_SET(29, 16)
#define EQOS_TDES2_BUF2_SZ_MASK_SHIFT	16
#define EQOS_TDES3_IVTIR_MASK		GENMASK_SET(19, 18)
#define EQOS_TDES3_IVTIR_SHIFT		18
#define EQOS_TDES3_IVLTV		(BIT_INDEX << (17))
#define EQOS_TDES2_TS_EN		(BIT_INDEX << (30))
#define EQOS_TDES2_IVT_MASK		GENMASK_SET(31, 16)
#define EQOS_TDES2_IVT_SHIFT		16
#define EQOS_TDES2_IRQ_ON_COMP		(BIT_INDEX << (31))

/* Trasmit Normal Descriptor 3 (TDES3 Read Format) */
#define EQOS_TDES3_PKT_SZ_MASK		GENMASK_SET(14, 0)
#define EQOS_TDES3_VLAN_TAG		GENMASK_SET(15, 0)
#define EQOS_TDES3_VLTV			(BIT_INDEX << (16))
#define EQOS_TDES3_CS_INS_MASK		GENMASK_SET(17, 16)
#define EQOS_TDES3_CS_INS_SHIFT		16
#define EQOS_TDES3_TCP_PKT_PL_MASK	GENMASK_SET(17, 0)
#define EQOS_TDES3_TCP_SEG_EN		(BIT_INDEX << (18))
#define EQOS_TDES3_HDR_LEN_SHIFT	19
#define EQOS_TDES3_SLOT_NUMBER_MASK	GENMASK_SET(22, 19)
#define EQOS_TDES3_SA_INS_CTRL_MASK	GENMASK_SET(25, 23)
#define EQOS_TDES3_SA_INS_CTRL_SHIFT	23
#define EQOS_TDES3_CRC_PAD_CTRL_MASK	GENMASK_SET(27, 26)

/* Trasmit Normal Descriptor 3 (TDES3 write-back Format) */
#define EQOS_TDES3_IP_HDR_ERR		(BIT_INDEX << (0))
#define EQOS_TDES3_DEF			(BIT_INDEX << (1))
#define EQOS_TDES3_UNDERFLOW_ERR	(BIT_INDEX << (2))
#define EQOS_TDES3_EXCESSIVE_DEFERRAL	(BIT_INDEX << (3))
#define EQOS_TDES3_COLLISION_COUNT_MASK	GENMASK_SET(7, 4)
#define EQOS_TDES3_COLLISION_COUNT_SHIFT	4
#define EQOS_TDES3_EXCESSIVE_COLLISION	(BIT_INDEX << (8))
#define EQOS_TDES3_LATE_COLLISION	(BIT_INDEX << (9))
#define EQOS_TDES3_NO_CARRIER		(BIT_INDEX << (10))
#define EQOS_TDES3_LOSS_CARRIER		(BIT_INDEX << (11))
#define EQOS_TDES3_PL_ERR		(BIT_INDEX << (12))
#define EQOS_TDES3_PKT_FLUSHED		(BIT_INDEX << (13))
#define EQOS_TDES3_JABBER_TIMEOUT	(BIT_INDEX << (14))
#define EQOS_TDES3_ERR_SUMMARY		(BIT_INDEX << (15))
#define EQOS_TDES3_TS_STATUS		(BIT_INDEX << (17))
#define EQOS_TDES3_TS_STATUS_SHIFT	17

/* Trasmit DES3 Common */
#define	EQOS_TDES3_RS1V			(BIT_INDEX << (26))
#define	EQOS_TDES3_RS1V_SHIFT		26
#define EQOS_TDES3_LAST_DESC		(BIT_INDEX << (28))
#define EQOS_TDES3_LAST_DESC_SHIFT	28
#define EQOS_TDES3_FIRST_DESC		(BIT_INDEX << (29))
#define EQOS_TDES3_CTX_TYPE		(BIT_INDEX << (30))
#define	EQOS_TDES3_CTX_TYPE_SHIFT	30

/* Trasmit DES4 */
#define EQOS_TDES4_LTV			(BIT_INDEX << (31))
#define EQOS_TDES4_LT			GENMASK_SET(7, 0)

/* Transmit DES5 */
#define EQOS_TDES5_LT			GENMASK_SET(31, 8)

/* Trasmit DES3 (read and write back) */
#define EQOS_TDES3_OWN			(BIT_INDEX << (31))
#define EQOS_TDES3_OWN_SHIFT		31

/* Normal receive descriptor (RDES) */

/* Receive DES0 (write back format) */
#define EQOS_RDES0_VLAN_TAG_MASK	GENMASK_SET(15, 0)

/* Receive DES1 (write back format) */
#define EQOS_RDES1_IP_PL_TYPE_MASK	GENMASK_SET(2, 0)
#define EQOS_RDES1_IP_HDR_ERR		(BIT_INDEX <<(3))
#define EQOS_RDES1_IPV4_HEADER		(BIT_INDEX <<(4))
#define EQOS_RDES1_IPV6_HEADER		(BIT_INDEX <<(5))
#define EQOS_RDES1_IP_CSUM_BYPASSED	(BIT_INDEX <<(6))
#define EQOS_RDES1_IP_CSUM_ERR		(BIT_INDEX <<(7))
#define EQOS_RDES1_PTP_MSG_TYPE_MASK	GENMASK_SET(11, 8)
#define EQOS_RDES1_PTP_PKT_TYPE		(BIT_INDEX <<(12))
#define EQOS_RDES1_PTP_VER		(BIT_INDEX << (13))
#define EQOS_RDES1_TS_AVAILABLE	    	(BIT_INDEX << (14))
#define EQOS_RDES1_TS_AVAILABLE_SHIFT	14
#define EQOS_RDES1_TS_DROPPED		(BIT_INDEX << (15))
#define EQOS_RDES1_IP_TYPE1_CSUM_MASK	GENMASK_SET(31, 16)

/* Receive DES2 (write back format) */
#define EQOS_RDES2_L3_L4_HEADER_SZ_MASK		GENMASK_SET(9, 0)
#define EQOS_RDES2_VLAN_FILT_STATUS		(BIT_INDEX << (15))
#define EQOS_RDES2_SA_FILT_FAIL			(BIT_INDEX << (16))
#define EQOS_RDES2_DA_FILT_FAIL			(BIT_INDEX << (17))
#define EQOS_RDES2_HASH_FILT_STATUS		(BIT_INDEX << (18))
#define EQOS_RDES2_MAC_ADDR_MATCH_MASK		GENMASK_SET(26, 19)
#define EQOS_RDES2_HASH_VAL_MATCH_MASK		GENMASK_SET(26, 19)
#define EQOS_RDES2_L3_FILT_MATCH		(BIT_INDEX << (27))
#define EQOS_RDES2_L4_FILT_MATCH		(BIT_INDEX << (28))
#define EQOS_RDES2_L3_L4_FILT_NB_MATCH_MASK	GENMASK_SET(27, 26)
#define EQOS_RDES2_L3_L4_FILT_NB_MATCH_SHIFT	26
#define EQOS_RDES2_HL				GENMASK_SET(9, 0)

/* Receive DES3 (write back format) */
#define EQOS_RDES3_PKT_SZ_MASK		GENMASK_SET(14, 0)
#define EQOS_RDES3_ERR_SUMMARY		(BIT_INDEX << (15))
#define EQOS_RDES3_PKT_LEN_TYPE_MASK	GENMASK_SET(18, 16)
#define EQOS_RDES3_DRIBBLE_ERR		(BIT_INDEX << (19))
#define EQOS_RDES3_RECEIVE_ERR		(BIT_INDEX << (20))
#define EQOS_RDES3_OVERFLOW_ERR		(BIT_INDEX << (21))
#define EQOS_RDES3_RECEIVE_WATCHDOG	(BIT_INDEX << (22))
#define EQOS_RDES3_GIANT_PKT		(BIT_INDEX << (23))
#define EQOS_RDES3_CRC_ERR		(BIT_INDEX << (24))
#define EQOS_RDES3_RDES0_VALID		(BIT_INDEX << (25))
#define EQOS_RDES3_RDES1_VALID		(BIT_INDEX << (26))
#define EQOS_RDES3_RDES2_VALID		(BIT_INDEX << (27))
#define EQOS_RDES3_LAST_DESC		(BIT_INDEX << (28))
#define EQOS_RDES3_FIRST_DESC		(BIT_INDEX << (29))
#define EQOS_RDES3_CTX_DESC		(BIT_INDEX << (30))
#define EQOS_RDES3_CTX_DESC_SHIFT	30

/* Receive DES3 (read format) */
#define EQOS_RDES3_BUFFER1_VALID_ADDR	(BIT_INDEX << (24))
#define EQOS_RDES3_BUFFER2_VALID_ADDR	(BIT_INDEX << (25))
#define EQOS_RDES3_INT_ON_COMP_EN	(BIT_INDEX << (30))

/* Transmit DES3 (read and write back) */
#define EQOS_RDES3_OWN			(BIT_INDEX << (31))

